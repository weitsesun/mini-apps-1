import ProcessCheckout from './ProcessCheckout.js';
import InfoHandler from './InfoHandler.js';
import AddressHandler from './AddressHandler.js';
import PaymentHandler from './PaymentHandler.js';
import FinalReview from './FinalReview.js';

class FrontPage extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "",
      email: "",
      password: "",
      addressline: "",
      city: "",
      zipcode: "",
      country: "",
      nameOnCard: "",
      creditCardNum: "",
      cvv: "",
      expDate: "",
      currentlyDisplayedForm: 0
    };
    this.changeInfo = this.changeInfo.bind(this);
    this.changeDisplayedForm = this.changeDisplayedForm.bind(this);
  }

  changeInfo(e) {
    this.setState({
      [e.target.name]: e.target.value
    });
  }

  changeDisplayedForm(e) {
    e.preventDefault();
    var curForm = this.state.currentlyDisplayedForm;
    curForm = (curForm + 1) % 5;
    this.setState({
      currentlyDisplayedForm: curForm
    });
  }

  pageRender() {
    switch (this.state.currentlyDisplayedForm) {
      case 0:
        return React.createElement(ProcessCheckout, {
          nextPage: this.changeDisplayedForm
        });

      case 1:
        return React.createElement(InfoHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 2:
        return React.createElement(AddressHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 3:
        return React.createElement(PaymentHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 4:
        return React.createElement(FinalReview, {
          info: this.state
        });
        break;

      default:
        return React.createElement(InfoHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
    }
  }

  render() {
    return React.createElement("div", null, React.createElement("h1", null, "Checking out..."), this.pageRender());
  }

}

export default FrontPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0Zyb250UGFnZS5qc3giXSwibmFtZXMiOlsiUHJvY2Vzc0NoZWNrb3V0IiwiSW5mb0hhbmRsZXIiLCJBZGRyZXNzSGFuZGxlciIsIlBheW1lbnRIYW5kbGVyIiwiRmluYWxSZXZpZXciLCJGcm9udFBhZ2UiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsIm5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiYWRkcmVzc2xpbmUiLCJjaXR5IiwiemlwY29kZSIsImNvdW50cnkiLCJuYW1lT25DYXJkIiwiY3JlZGl0Q2FyZE51bSIsImN2diIsImV4cERhdGUiLCJjdXJyZW50bHlEaXNwbGF5ZWRGb3JtIiwiY2hhbmdlSW5mbyIsImJpbmQiLCJjaGFuZ2VEaXNwbGF5ZWRGb3JtIiwiZSIsInNldFN0YXRlIiwidGFyZ2V0IiwidmFsdWUiLCJwcmV2ZW50RGVmYXVsdCIsImN1ckZvcm0iLCJwYWdlUmVuZGVyIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxlQUFQLE1BQTRCLHNCQUE1QjtBQUNBLE9BQU9DLFdBQVAsTUFBd0Isa0JBQXhCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQixxQkFBM0I7QUFDQSxPQUFPQyxjQUFQLE1BQTJCLHFCQUEzQjtBQUNBLE9BQU9DLFdBQVAsTUFBd0Isa0JBQXhCOztBQUVBLE1BQU1DLFNBQU4sU0FBd0JDLEtBQUssQ0FBQ0MsU0FBOUIsQ0FBd0M7QUFDdENDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEVBREs7QUFFWEMsTUFBQUEsS0FBSyxFQUFFLEVBRkk7QUFHWEMsTUFBQUEsUUFBUSxFQUFFLEVBSEM7QUFJWEMsTUFBQUEsV0FBVyxFQUFFLEVBSkY7QUFLWEMsTUFBQUEsSUFBSSxFQUFFLEVBTEs7QUFNWEMsTUFBQUEsT0FBTyxFQUFFLEVBTkU7QUFPWEMsTUFBQUEsT0FBTyxFQUFFLEVBUEU7QUFRWEMsTUFBQUEsVUFBVSxFQUFFLEVBUkQ7QUFTWEMsTUFBQUEsYUFBYSxFQUFFLEVBVEo7QUFVWEMsTUFBQUEsR0FBRyxFQUFFLEVBVk07QUFXWEMsTUFBQUEsT0FBTyxFQUFFLEVBWEU7QUFZWEMsTUFBQUEsc0JBQXNCLEVBQUU7QUFaYixLQUFiO0FBY0EsU0FBS0MsVUFBTCxHQUFrQixLQUFLQSxVQUFMLENBQWdCQyxJQUFoQixDQUFxQixJQUFyQixDQUFsQjtBQUNBLFNBQUtDLG1CQUFMLEdBQTJCLEtBQUtBLG1CQUFMLENBQXlCRCxJQUF6QixDQUE4QixJQUE5QixDQUEzQjtBQUNEOztBQUVERCxFQUFBQSxVQUFVLENBQUNHLENBQUQsRUFBSTtBQUNaLFNBQUtDLFFBQUwsQ0FBYztBQUNaLE9BQUNELENBQUMsQ0FBQ0UsTUFBRixDQUFTakIsSUFBVixHQUFpQmUsQ0FBQyxDQUFDRSxNQUFGLENBQVNDO0FBRGQsS0FBZDtBQUdEOztBQUVESixFQUFBQSxtQkFBbUIsQ0FBQ0MsQ0FBRCxFQUFJO0FBQ3JCQSxJQUFBQSxDQUFDLENBQUNJLGNBQUY7QUFDQSxRQUFJQyxPQUFPLEdBQUcsS0FBS3JCLEtBQUwsQ0FBV1ksc0JBQXpCO0FBQ0FTLElBQUFBLE9BQU8sR0FBRyxDQUFDQSxPQUFPLEdBQUcsQ0FBWCxJQUFnQixDQUExQjtBQUNBLFNBQUtKLFFBQUwsQ0FBYztBQUNaTCxNQUFBQSxzQkFBc0IsRUFBRVM7QUFEWixLQUFkO0FBR0Q7O0FBRURDLEVBQUFBLFVBQVUsR0FBRztBQUNYLFlBQU8sS0FBS3RCLEtBQUwsQ0FBV1ksc0JBQWxCO0FBQ0UsV0FBSyxDQUFMO0FBQ0UsZUFBTyxvQkFBQyxlQUFEO0FBQWlCLFVBQUEsUUFBUSxFQUFFLEtBQUtHO0FBQWhDLFVBQVA7O0FBQ0YsV0FBSyxDQUFMO0FBQ0UsZUFBTyxvQkFBQyxXQUFEO0FBQWEsVUFBQSxVQUFVLEVBQUUsS0FBS0YsVUFBOUI7QUFBMEMsVUFBQSxRQUFRLEVBQUUsS0FBS0U7QUFBekQsVUFBUDtBQUNBOztBQUNGLFdBQUssQ0FBTDtBQUNFLGVBQU8sb0JBQUMsY0FBRDtBQUFnQixVQUFBLFVBQVUsRUFBRSxLQUFLRixVQUFqQztBQUE2QyxVQUFBLFFBQVEsRUFBRSxLQUFLRTtBQUE1RCxVQUFQO0FBQ0E7O0FBQ0YsV0FBSyxDQUFMO0FBQ0UsZUFBTyxvQkFBQyxjQUFEO0FBQWdCLFVBQUEsVUFBVSxFQUFFLEtBQUtGLFVBQWpDO0FBQTZDLFVBQUEsUUFBUSxFQUFFLEtBQUtFO0FBQTVELFVBQVA7QUFDQTs7QUFDRixXQUFLLENBQUw7QUFDRSxlQUFPLG9CQUFDLFdBQUQ7QUFBYSxVQUFBLElBQUksRUFBRSxLQUFLZjtBQUF4QixVQUFQO0FBQ0E7O0FBQ0Y7QUFDRSxlQUFPLG9CQUFDLFdBQUQ7QUFBYSxVQUFBLFVBQVUsRUFBRSxLQUFLYSxVQUE5QjtBQUEwQyxVQUFBLFFBQVEsRUFBRSxLQUFLRTtBQUF6RCxVQUFQO0FBaEJKO0FBa0JEOztBQUVEUSxFQUFBQSxNQUFNLEdBQUc7QUFDUCxXQUNFLGlDQUNFLGtEQURGLEVBRUcsS0FBS0QsVUFBTCxFQUZILENBREY7QUFNRDs7QUFoRXFDOztBQW1FeEMsZUFBZTNCLFNBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvY2Vzc0NoZWNrb3V0IGZyb20gJy4vUHJvY2Vzc0NoZWNrb3V0LmpzJztcbmltcG9ydCBJbmZvSGFuZGxlciBmcm9tICcuL0luZm9IYW5kbGVyLmpzJztcbmltcG9ydCBBZGRyZXNzSGFuZGxlciBmcm9tICcuL0FkZHJlc3NIYW5kbGVyLmpzJztcbmltcG9ydCBQYXltZW50SGFuZGxlciBmcm9tICcuL1BheW1lbnRIYW5kbGVyLmpzJztcbmltcG9ydCBGaW5hbFJldmlldyBmcm9tICcuL0ZpbmFsUmV2aWV3LmpzJztcblxuY2xhc3MgRnJvbnRQYWdlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG5hbWU6IFwiXCIsXG4gICAgICBlbWFpbDogXCJcIixcbiAgICAgIHBhc3N3b3JkOiBcIlwiLFxuICAgICAgYWRkcmVzc2xpbmU6IFwiXCIsXG4gICAgICBjaXR5OiBcIlwiLFxuICAgICAgemlwY29kZTogXCJcIixcbiAgICAgIGNvdW50cnk6IFwiXCIsXG4gICAgICBuYW1lT25DYXJkOiBcIlwiLFxuICAgICAgY3JlZGl0Q2FyZE51bTogXCJcIixcbiAgICAgIGN2djogXCJcIixcbiAgICAgIGV4cERhdGU6IFwiXCIsXG4gICAgICBjdXJyZW50bHlEaXNwbGF5ZWRGb3JtOiAwXG4gICAgfVxuICAgIHRoaXMuY2hhbmdlSW5mbyA9IHRoaXMuY2hhbmdlSW5mby5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY2hhbmdlRGlzcGxheWVkRm9ybSA9IHRoaXMuY2hhbmdlRGlzcGxheWVkRm9ybS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgY2hhbmdlSW5mbyhlKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBbZS50YXJnZXQubmFtZV06IGUudGFyZ2V0LnZhbHVlXG4gICAgfSk7XG4gIH1cblxuICBjaGFuZ2VEaXNwbGF5ZWRGb3JtKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgdmFyIGN1ckZvcm0gPSB0aGlzLnN0YXRlLmN1cnJlbnRseURpc3BsYXllZEZvcm07XG4gICAgY3VyRm9ybSA9IChjdXJGb3JtICsgMSkgJSA1O1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgY3VycmVudGx5RGlzcGxheWVkRm9ybTogY3VyRm9ybVxuICAgIH0pXG4gIH1cblxuICBwYWdlUmVuZGVyKCkge1xuICAgIHN3aXRjaCh0aGlzLnN0YXRlLmN1cnJlbnRseURpc3BsYXllZEZvcm0pIHtcbiAgICAgIGNhc2UgMDpcbiAgICAgICAgcmV0dXJuIDxQcm9jZXNzQ2hlY2tvdXQgbmV4dFBhZ2U9e3RoaXMuY2hhbmdlRGlzcGxheWVkRm9ybX0vPlxuICAgICAgY2FzZSAxOlxuICAgICAgICByZXR1cm4gPEluZm9IYW5kbGVyIGNoYW5nZUluZm89e3RoaXMuY2hhbmdlSW5mb30gbmV4dFBhZ2U9e3RoaXMuY2hhbmdlRGlzcGxheWVkRm9ybX0vPlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIDxBZGRyZXNzSGFuZGxlciBjaGFuZ2VJbmZvPXt0aGlzLmNoYW5nZUluZm99IG5leHRQYWdlPXt0aGlzLmNoYW5nZURpc3BsYXllZEZvcm19Lz5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiA8UGF5bWVudEhhbmRsZXIgY2hhbmdlSW5mbz17dGhpcy5jaGFuZ2VJbmZvfSBuZXh0UGFnZT17dGhpcy5jaGFuZ2VEaXNwbGF5ZWRGb3JtfS8+XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSA0OlxuICAgICAgICByZXR1cm4gPEZpbmFsUmV2aWV3IGluZm89e3RoaXMuc3RhdGV9Lz5cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gPEluZm9IYW5kbGVyIGNoYW5nZUluZm89e3RoaXMuY2hhbmdlSW5mb30gbmV4dFBhZ2U9e3RoaXMuY2hhbmdlRGlzcGxheWVkRm9ybX0vPlxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGgxPkNoZWNraW5nIG91dC4uLjwvaDE+XG4gICAgICAgIHt0aGlzLnBhZ2VSZW5kZXIoKX1cbiAgICAgIDwvZGl2PlxuICAgIClcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGcm9udFBhZ2U7Il19