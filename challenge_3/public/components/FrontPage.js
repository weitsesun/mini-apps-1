import ProcessCheckout from './ProcessCheckout.js';
import InfoHandler from './InfoHandler.js';
import AddressHandler from './AddressHandler.js';
import PaymentHandler from './PaymentHandler.js';

class FrontPage extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "",
      email: "",
      password: "",
      addressline: "",
      city: "",
      zipcode: "",
      country: "",
      nameOnCard: "",
      creditCardNum: "",
      cvv: "",
      expDate: "",
      currentlyDisplayedForm: 0
    };
    this.changeInfo = this.changeInfo.bind(this);
    this.changeDisplayedForm = this.changeDisplayedForm.bind(this);
  }

  changeInfo(e) {
    this.setState({
      [e.target.name]: e.target.value
    });
  }

  changeDisplayedForm(e) {
    e.preventDefault();
    var curForm = this.state.currentlyDisplayedForm;
    curForm = (curForm + 1) % 4;
    this.setState({
      currentlyDisplayedForm: curForm
    });
  }

  pageRender() {
    switch (this.state.currentlyDisplayedForm) {
      case 0:
        return React.createElement(ProcessCheckout, {
          nextPage: this.changeDisplayedForm
        });

      case 1:
        return React.createElement(InfoHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 2:
        return React.createElement(AddressHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 3:
        return React.createElement(PaymentHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      default:
        return React.createElement(InfoHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
    }
  }

  render() {
    return React.createElement("div", null, React.createElement("h1", null, "Checking out..."), this.pageRender());
  }

}

export default FrontPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0Zyb250UGFnZS5qc3giXSwibmFtZXMiOlsiUHJvY2Vzc0NoZWNrb3V0IiwiSW5mb0hhbmRsZXIiLCJBZGRyZXNzSGFuZGxlciIsIlBheW1lbnRIYW5kbGVyIiwiRnJvbnRQYWdlIiwiUmVhY3QiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJuYW1lIiwiZW1haWwiLCJwYXNzd29yZCIsImFkZHJlc3NsaW5lIiwiY2l0eSIsInppcGNvZGUiLCJjb3VudHJ5IiwibmFtZU9uQ2FyZCIsImNyZWRpdENhcmROdW0iLCJjdnYiLCJleHBEYXRlIiwiY3VycmVudGx5RGlzcGxheWVkRm9ybSIsImNoYW5nZUluZm8iLCJiaW5kIiwiY2hhbmdlRGlzcGxheWVkRm9ybSIsImUiLCJzZXRTdGF0ZSIsInRhcmdldCIsInZhbHVlIiwicHJldmVudERlZmF1bHQiLCJjdXJGb3JtIiwicGFnZVJlbmRlciIsInJlbmRlciJdLCJtYXBwaW5ncyI6IkFBQUEsT0FBT0EsZUFBUCxNQUE0QixzQkFBNUI7QUFDQSxPQUFPQyxXQUFQLE1BQXdCLGtCQUF4QjtBQUNBLE9BQU9DLGNBQVAsTUFBMkIscUJBQTNCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQixxQkFBM0I7O0FBRUEsTUFBTUMsU0FBTixTQUF3QkMsS0FBSyxDQUFDQyxTQUE5QixDQUF3QztBQUN0Q0MsRUFBQUEsV0FBVyxDQUFDQyxLQUFELEVBQVE7QUFDakIsVUFBTUEsS0FBTjtBQUNBLFNBQUtDLEtBQUwsR0FBYTtBQUNYQyxNQUFBQSxJQUFJLEVBQUUsRUFESztBQUVYQyxNQUFBQSxLQUFLLEVBQUUsRUFGSTtBQUdYQyxNQUFBQSxRQUFRLEVBQUUsRUFIQztBQUlYQyxNQUFBQSxXQUFXLEVBQUUsRUFKRjtBQUtYQyxNQUFBQSxJQUFJLEVBQUUsRUFMSztBQU1YQyxNQUFBQSxPQUFPLEVBQUUsRUFORTtBQU9YQyxNQUFBQSxPQUFPLEVBQUUsRUFQRTtBQVFYQyxNQUFBQSxVQUFVLEVBQUUsRUFSRDtBQVNYQyxNQUFBQSxhQUFhLEVBQUUsRUFUSjtBQVVYQyxNQUFBQSxHQUFHLEVBQUUsRUFWTTtBQVdYQyxNQUFBQSxPQUFPLEVBQUUsRUFYRTtBQVlYQyxNQUFBQSxzQkFBc0IsRUFBRTtBQVpiLEtBQWI7QUFjQSxTQUFLQyxVQUFMLEdBQWtCLEtBQUtBLFVBQUwsQ0FBZ0JDLElBQWhCLENBQXFCLElBQXJCLENBQWxCO0FBQ0EsU0FBS0MsbUJBQUwsR0FBMkIsS0FBS0EsbUJBQUwsQ0FBeUJELElBQXpCLENBQThCLElBQTlCLENBQTNCO0FBQ0Q7O0FBRURELEVBQUFBLFVBQVUsQ0FBQ0csQ0FBRCxFQUFJO0FBQ1osU0FBS0MsUUFBTCxDQUFjO0FBQ1osT0FBQ0QsQ0FBQyxDQUFDRSxNQUFGLENBQVNqQixJQUFWLEdBQWlCZSxDQUFDLENBQUNFLE1BQUYsQ0FBU0M7QUFEZCxLQUFkO0FBR0Q7O0FBRURKLEVBQUFBLG1CQUFtQixDQUFDQyxDQUFELEVBQUk7QUFDckJBLElBQUFBLENBQUMsQ0FBQ0ksY0FBRjtBQUNBLFFBQUlDLE9BQU8sR0FBRyxLQUFLckIsS0FBTCxDQUFXWSxzQkFBekI7QUFDQVMsSUFBQUEsT0FBTyxHQUFHLENBQUNBLE9BQU8sR0FBRyxDQUFYLElBQWdCLENBQTFCO0FBQ0EsU0FBS0osUUFBTCxDQUFjO0FBQ1pMLE1BQUFBLHNCQUFzQixFQUFFUztBQURaLEtBQWQ7QUFHRDs7QUFFREMsRUFBQUEsVUFBVSxHQUFHO0FBQ1gsWUFBTyxLQUFLdEIsS0FBTCxDQUFXWSxzQkFBbEI7QUFDRSxXQUFLLENBQUw7QUFDRSxlQUFPLG9CQUFDLGVBQUQ7QUFBaUIsVUFBQSxRQUFRLEVBQUUsS0FBS0c7QUFBaEMsVUFBUDs7QUFDRixXQUFLLENBQUw7QUFDRSxlQUFPLG9CQUFDLFdBQUQ7QUFBYSxVQUFBLFVBQVUsRUFBRSxLQUFLRixVQUE5QjtBQUEwQyxVQUFBLFFBQVEsRUFBRSxLQUFLRTtBQUF6RCxVQUFQO0FBQ0E7O0FBQ0YsV0FBSyxDQUFMO0FBQ0UsZUFBTyxvQkFBQyxjQUFEO0FBQWdCLFVBQUEsVUFBVSxFQUFFLEtBQUtGLFVBQWpDO0FBQTZDLFVBQUEsUUFBUSxFQUFFLEtBQUtFO0FBQTVELFVBQVA7QUFDQTs7QUFDRixXQUFLLENBQUw7QUFDRSxlQUFPLG9CQUFDLGNBQUQ7QUFBZ0IsVUFBQSxVQUFVLEVBQUUsS0FBS0YsVUFBakM7QUFBNkMsVUFBQSxRQUFRLEVBQUUsS0FBS0U7QUFBNUQsVUFBUDtBQUNBOztBQUNGO0FBQ0UsZUFBTyxvQkFBQyxXQUFEO0FBQWEsVUFBQSxVQUFVLEVBQUUsS0FBS0YsVUFBOUI7QUFBMEMsVUFBQSxRQUFRLEVBQUUsS0FBS0U7QUFBekQsVUFBUDtBQWJKO0FBZUQ7O0FBRURRLEVBQUFBLE1BQU0sR0FBRztBQUVQLFdBQ0UsaUNBQ0Usa0RBREYsRUFFRyxLQUFLRCxVQUFMLEVBRkgsQ0FERjtBQVdEOztBQW5FcUM7O0FBc0V4QyxlQUFlM0IsU0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9jZXNzQ2hlY2tvdXQgZnJvbSAnLi9Qcm9jZXNzQ2hlY2tvdXQuanMnXG5pbXBvcnQgSW5mb0hhbmRsZXIgZnJvbSAnLi9JbmZvSGFuZGxlci5qcydcbmltcG9ydCBBZGRyZXNzSGFuZGxlciBmcm9tICcuL0FkZHJlc3NIYW5kbGVyLmpzJ1xuaW1wb3J0IFBheW1lbnRIYW5kbGVyIGZyb20gJy4vUGF5bWVudEhhbmRsZXIuanMnXG5cbmNsYXNzIEZyb250UGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuYW1lOiBcIlwiLFxuICAgICAgZW1haWw6IFwiXCIsXG4gICAgICBwYXNzd29yZDogXCJcIixcbiAgICAgIGFkZHJlc3NsaW5lOiBcIlwiLFxuICAgICAgY2l0eTogXCJcIixcbiAgICAgIHppcGNvZGU6IFwiXCIsXG4gICAgICBjb3VudHJ5OiBcIlwiLFxuICAgICAgbmFtZU9uQ2FyZDogXCJcIixcbiAgICAgIGNyZWRpdENhcmROdW06IFwiXCIsXG4gICAgICBjdnY6IFwiXCIsXG4gICAgICBleHBEYXRlOiBcIlwiLFxuICAgICAgY3VycmVudGx5RGlzcGxheWVkRm9ybTogMFxuICAgIH1cbiAgICB0aGlzLmNoYW5nZUluZm8gPSB0aGlzLmNoYW5nZUluZm8uYmluZCh0aGlzKTtcbiAgICB0aGlzLmNoYW5nZURpc3BsYXllZEZvcm0gPSB0aGlzLmNoYW5nZURpc3BsYXllZEZvcm0uYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNoYW5nZUluZm8oZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgW2UudGFyZ2V0Lm5hbWVdOiBlLnRhcmdldC52YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlRGlzcGxheWVkRm9ybShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjdXJGb3JtID0gdGhpcy5zdGF0ZS5jdXJyZW50bHlEaXNwbGF5ZWRGb3JtO1xuICAgIGN1ckZvcm0gPSAoY3VyRm9ybSArIDEpICUgNDtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRseURpc3BsYXllZEZvcm06IGN1ckZvcm1cbiAgICB9KVxuICB9XG5cbiAgcGFnZVJlbmRlcigpIHtcbiAgICBzd2l0Y2godGhpcy5zdGF0ZS5jdXJyZW50bHlEaXNwbGF5ZWRGb3JtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiA8UHJvY2Vzc0NoZWNrb3V0IG5leHRQYWdlPXt0aGlzLmNoYW5nZURpc3BsYXllZEZvcm19Lz5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIDxJbmZvSGFuZGxlciBjaGFuZ2VJbmZvPXt0aGlzLmNoYW5nZUluZm99IG5leHRQYWdlPXt0aGlzLmNoYW5nZURpc3BsYXllZEZvcm19Lz5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiA8QWRkcmVzc0hhbmRsZXIgY2hhbmdlSW5mbz17dGhpcy5jaGFuZ2VJbmZvfSBuZXh0UGFnZT17dGhpcy5jaGFuZ2VEaXNwbGF5ZWRGb3JtfS8+XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gPFBheW1lbnRIYW5kbGVyIGNoYW5nZUluZm89e3RoaXMuY2hhbmdlSW5mb30gbmV4dFBhZ2U9e3RoaXMuY2hhbmdlRGlzcGxheWVkRm9ybX0vPlxuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiA8SW5mb0hhbmRsZXIgY2hhbmdlSW5mbz17dGhpcy5jaGFuZ2VJbmZvfSBuZXh0UGFnZT17dGhpcy5jaGFuZ2VEaXNwbGF5ZWRGb3JtfS8+XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8aDE+Q2hlY2tpbmcgb3V0Li4uPC9oMT5cbiAgICAgICAge3RoaXMucGFnZVJlbmRlcigpfVxuICAgICAgICB7LyogPEluZm9IYW5kbGVyIGNoYW5nZUluZm89e3RoaXMuY2hhbmdlSW5mby5iaW5kKHRoaXMpfS8+XG4gICAgICAgIDxici8+XG4gICAgICAgIDxBZGRyZXNzSGFuZGxlciBjaGFuZ2VJbmZvPXt0aGlzLmNoYW5nZUluZm8uYmluZCh0aGlzKX0vPlxuICAgICAgICA8YnIvPlxuICAgICAgICA8UGF5bWVudEhhbmRsZXIgY2hhbmdlSW5mbz17dGhpcy5jaGFuZ2VJbmZvLmJpbmQodGhpcyl9Lz4gKi99XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRnJvbnRQYWdlOyJdfQ==