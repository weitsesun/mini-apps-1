import ProcessCheckout from './ProcessCheckout.js';
import InfoHandler from './InfoHandler.js';
import AddressHandler from './AddressHandler.js';
import PaymentHandler from './PaymentHandler.js';
import FinalReview from './FinalReview.js';

class FrontPage extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      name: "",
      email: "",
      password: "",
      addressline: "",
      city: "",
      zipcode: "",
      country: "",
      nameOnCard: "",
      creditCardNum: "",
      cvv: "",
      expDate: "",
      currentlyDisplayedForm: 0
    };
    this.changeInfo = this.changeInfo.bind(this);
    this.changeDisplayedForm = this.changeDisplayedForm.bind(this);
    this.postToDatabase = this.postToDatabase.bind(this);
  }

  changeInfo(e) {
    this.setState({
      [e.target.name]: e.target.value
    });
  }

  changeDisplayedForm(e) {
    e.preventDefault();
    var curForm = this.state.currentlyDisplayedForm;
    curForm = (curForm + 1) % 5;
    this.setState({
      currentlyDisplayedForm: curForm
    });
  }

  postToDatabase(e) {
    e.preventDefault();
    console.log(this.state);
    console.log("postTodatabase invoked");
    axios.post("http://localhost:3000", this.state).then(res => {
      console.log('Success: ', res);
    }).catch(err => {
      console.log('Err: ', err);
    });
  }

  pageRender() {
    switch (this.state.currentlyDisplayedForm) {
      case 0:
        return React.createElement(ProcessCheckout, {
          nextPage: this.changeDisplayedForm
        });

      case 1:
        return React.createElement(InfoHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 2:
        return React.createElement(AddressHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 3:
        return React.createElement(PaymentHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
        break;

      case 4:
        return React.createElement(FinalReview, {
          info: this.state,
          sendToData: this.postToDatabase
        });
        break;

      default:
        return React.createElement(InfoHandler, {
          changeInfo: this.changeInfo,
          nextPage: this.changeDisplayedForm
        });
    }
  }

  render() {
    return React.createElement("div", null, React.createElement("h1", null, "Checking out..."), this.pageRender());
  }

}

export default FrontPage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9jb21wb25lbnRzL0Zyb250UGFnZS5qc3giXSwibmFtZXMiOlsiUHJvY2Vzc0NoZWNrb3V0IiwiSW5mb0hhbmRsZXIiLCJBZGRyZXNzSGFuZGxlciIsIlBheW1lbnRIYW5kbGVyIiwiRmluYWxSZXZpZXciLCJGcm9udFBhZ2UiLCJSZWFjdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJzdGF0ZSIsIm5hbWUiLCJlbWFpbCIsInBhc3N3b3JkIiwiYWRkcmVzc2xpbmUiLCJjaXR5IiwiemlwY29kZSIsImNvdW50cnkiLCJuYW1lT25DYXJkIiwiY3JlZGl0Q2FyZE51bSIsImN2diIsImV4cERhdGUiLCJjdXJyZW50bHlEaXNwbGF5ZWRGb3JtIiwiY2hhbmdlSW5mbyIsImJpbmQiLCJjaGFuZ2VEaXNwbGF5ZWRGb3JtIiwicG9zdFRvRGF0YWJhc2UiLCJlIiwic2V0U3RhdGUiLCJ0YXJnZXQiLCJ2YWx1ZSIsInByZXZlbnREZWZhdWx0IiwiY3VyRm9ybSIsImNvbnNvbGUiLCJsb2ciLCJheGlvcyIsInBvc3QiLCJ0aGVuIiwicmVzIiwiY2F0Y2giLCJlcnIiLCJwYWdlUmVuZGVyIiwicmVuZGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxPQUFPQSxlQUFQLE1BQTRCLHNCQUE1QjtBQUNBLE9BQU9DLFdBQVAsTUFBd0Isa0JBQXhCO0FBQ0EsT0FBT0MsY0FBUCxNQUEyQixxQkFBM0I7QUFDQSxPQUFPQyxjQUFQLE1BQTJCLHFCQUEzQjtBQUNBLE9BQU9DLFdBQVAsTUFBd0Isa0JBQXhCOztBQUdBLE1BQU1DLFNBQU4sU0FBd0JDLEtBQUssQ0FBQ0MsU0FBOUIsQ0FBd0M7QUFDdENDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRO0FBQ2pCLFVBQU1BLEtBQU47QUFDQSxTQUFLQyxLQUFMLEdBQWE7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEVBREs7QUFFWEMsTUFBQUEsS0FBSyxFQUFFLEVBRkk7QUFHWEMsTUFBQUEsUUFBUSxF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RjtBQUNFLGVBQU8sb0JBQUMsV0FBRDtBQUFhLFVBQUEsVUFBVSxFQUFFLEtBQUtILFVBQTlCO0FBQTBDLFVBQUEsUUFBUSxFQUFFLEtBQUtFO0FBQXpELFVBQVA7QUFoQko7QUFrQkQ7O0FBRURpQixFQUFBQSxNQUFNLEdBQUc7QUFDUCxXQUNFLGlDQUNFLGtEQURGLEVBRUcsS0FBS0QsVUFBTCxFQUZILENBREY7QUFNRDs7QUE5RXFDOztBQWlGeEMsZUFBZXBDLFNBQWYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvY2Vzc0NoZWNrb3V0IGZyb20gJy4vUHJvY2Vzc0NoZWNrb3V0LmpzJztcbmltcG9ydCBJbmZvSGFuZGxlciBmcm9tICcuL0luZm9IYW5kbGVyLmpzJztcbmltcG9ydCBBZGRyZXNzSGFuZGxlciBmcm9tICcuL0FkZHJlc3NIYW5kbGVyLmpzJztcbmltcG9ydCBQYXltZW50SGFuZGxlciBmcm9tICcuL1BheW1lbnRIYW5kbGVyLmpzJztcbmltcG9ydCBGaW5hbFJldmlldyBmcm9tICcuL0ZpbmFsUmV2aWV3LmpzJztcblxuXG5jbGFzcyBGcm9udFBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbmFtZTogXCJcIixcbiAgICAgIGVtYWlsOiBcIlwiLFxuICAgICAgcGFzc3dvcmQ6IFwiXCIsXG4gICAgICBhZGRyZXNzbGluZTogXCJcIixcbiAgICAgIGNpdHk6IFwiXCIsXG4gICAgICB6aXBjb2RlOiBcIlwiLFxuICAgICAgY291bnRyeTogXCJcIixcbiAgICAgIG5hbWVPbkNhcmQ6IFwiXCIsXG4gICAgICBjcmVkaXRDYXJkTnVtOiBcIlwiLFxuICAgICAgY3Z2OiBcIlwiLFxuICAgICAgZXhwRGF0ZTogXCJcIixcbiAgICAgIGN1cnJlbnRseURpc3BsYXllZEZvcm06IDBcbiAgICB9XG4gICAgdGhpcy5jaGFuZ2VJbmZvID0gdGhpcy5jaGFuZ2VJbmZvLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jaGFuZ2VEaXNwbGF5ZWRGb3JtID0gdGhpcy5jaGFuZ2VEaXNwbGF5ZWRGb3JtLmJpbmQodGhpcyk7XG4gICAgdGhpcy5wb3N0VG9EYXRhYmFzZSA9IHRoaXMucG9zdFRvRGF0YWJhc2UuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNoYW5nZUluZm8oZSkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgW2UudGFyZ2V0Lm5hbWVdOiBlLnRhcmdldC52YWx1ZVxuICAgIH0pO1xuICB9XG5cbiAgY2hhbmdlRGlzcGxheWVkRm9ybShlKSB7XG4gICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIHZhciBjdXJGb3JtID0gdGhpcy5zdGF0ZS5jdXJyZW50bHlEaXNwbGF5ZWRGb3JtO1xuICAgIGN1ckZvcm0gPSAoY3VyRm9ybSArIDEpICUgNTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGN1cnJlbnRseURpc3BsYXllZEZvcm06IGN1ckZvcm1cbiAgICB9KVxuICB9XG5cbiAgcG9zdFRvRGF0YWJhc2UoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBjb25zb2xlLmxvZyh0aGlzLnN0YXRlKTtcbiAgICBjb25zb2xlLmxvZyhcInBvc3RUb2RhdGFiYXNlIGludm9rZWRcIik7XG4gICAgYXhpb3MucG9zdChcImh0dHA6Ly9sb2NhbGhvc3Q6MzAwMFwiLCB0aGlzLnN0YXRlKVxuICAgICAgLnRoZW4oKHJlcyk9PntcbiAgICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3M6ICcsIHJlcyk7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKChlcnIpPT57XG4gICAgICAgIGNvbnNvbGUubG9nKCdFcnI6ICcsIGVycik7XG4gICAgICB9KVxuICB9XG5cbiAgcGFnZVJlbmRlcigpIHtcbiAgICBzd2l0Y2godGhpcy5zdGF0ZS5jdXJyZW50bHlEaXNwbGF5ZWRGb3JtKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICAgIHJldHVybiA8UHJvY2Vzc0NoZWNrb3V0IG5leHRQYWdlPXt0aGlzLmNoYW5nZURpc3BsYXllZEZvcm19Lz5cbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIDxJbmZvSGFuZGxlciBjaGFuZ2VJbmZvPXt0aGlzLmNoYW5nZUluZm99IG5leHRQYWdlPXt0aGlzLmNoYW5nZURpc3BsYXllZEZvcm19Lz5cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiA8QWRkcmVzc0hhbmRsZXIgY2hhbmdlSW5mbz17dGhpcy5jaGFuZ2VJbmZvfSBuZXh0UGFnZT17dGhpcy5jaGFuZ2VEaXNwbGF5ZWRGb3JtfS8+XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gPFBheW1lbnRIYW5kbGVyIGNoYW5nZUluZm89e3RoaXMuY2hhbmdlSW5mb30gbmV4dFBhZ2U9e3RoaXMuY2hhbmdlRGlzcGxheWVkRm9ybX0vPlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIDxGaW5hbFJldmlldyBpbmZvPXt0aGlzLnN0YXRlfSBzZW5kVG9EYXRhPXt0aGlzLnBvc3RUb0RhdGFiYXNlfS8+XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIDxJbmZvSGFuZGxlciBjaGFuZ2VJbmZvPXt0aGlzLmNoYW5nZUluZm99IG5leHRQYWdlPXt0aGlzLmNoYW5nZURpc3BsYXllZEZvcm19Lz5cbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIDxoMT5DaGVja2luZyBvdXQuLi48L2gxPlxuICAgICAgICB7dGhpcy5wYWdlUmVuZGVyKCl9XG4gICAgICA8L2Rpdj5cbiAgICApXG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRnJvbnRQYWdlOyJdfQ==